import numpy as np
import pandas as pd
import logging
import os
import glob

def read_hkl(filepath, datatype='3D-EDT'):
    """To read hkl file in various format.
    filepath: string. e.g. ‘./data/ZSM5.hkl’
    Reture: n x 5 numpy array of [h, k, l, intensity, sigma]
    """
    if datatype == '3D-EDT':
        return read_hkl_edt(filepath)
    elif datatype == 'CAP':
        return read_hkl_cap(filepath)
    elif datatype == 'PETS2':
        return read_hkl_pets2(filepath)
    elif datatype == 'XDS_SHELX':
        return read_hkl_XDS(filepath)
    elif datatype == 'GENERAL':
        return np.loadtxt(filepath)

def read_hkl_XDS(filepath):
    """To read hkl file in SHELX format generated by XDS.
    exclude the last line and to remove indices of negative intensity value."""
    data = np.loadtxt(filepath)
    data = data[0:-1,0:5]
    positive = data[:,3] > 0
    data = data[positive]
    return data

def read_hkl_cap(filepath):
    """to read hkl file in CrysAliPro of Rigaku format"""
    data = np.empty(shape=[0,5])
    with open(filepath, 'r') as file2read:
        while True:
            line = file2read.readline()
            line = line.split()
            if not line:
                break
            if line[0]=='0' and line[1]=='0' and line[2]=='0':
                continue
            h, k, l = float(line[0].strip()), float(line[1].strip()), float(line[2].strip())
            inten, sigma = float(line[3].strip()), float(line[4].strip())
            data_temp = np.array([h, k, l, inten, sigma]).reshape(1, 5)
            data = np.append(data,data_temp, axis=0)
    return data

def read_hkl_pets2(filepath):
    """to read hkl file in PETS2 format."""
    data = np.loadtxt(filepath, usecols = (0,1, 2, 3, 4))
    return np.array(data)

def read_hkl_edt(filepath):
    """To read hkl int format of (3i4, f8.2) shelx.
    filepath: string. e.g. ‘./data/ZSM5.hkl’
    Reture: n x 5 numpy array.
    """
    h, k, l, Inte, Sigma = [], [], [], [], []                   # lists to store h, k, l, intensity and sigma column
    data = []                                                   # to store h, k, l, intensity and sigma list
    with open(filepath, 'r') as file2read:
        while True:
            line = file2read.readline()
            if not line:
                break
            h.append(int(line[0:4].strip()))
            k.append(int(line[4:8].strip()))
            l.append(int(line[8:12].strip()))
            Inte.append(float(line[12:20].strip()))
            Sigma.append(float(line[20:28].strip()))
            pass
        pass
    if len(h) == len(k) == len(l) == len(Inte) == len(Sigma):
        data.append(h)
        data.append(k)
        data.append(l)
        data.append(Inte)
        data.append(Sigma)
        data = np.stack(data, axis=1)
        print("hkl file was successfully read!")
        return data
    else:
        print("hkl file was failed to read!")
        raise Exception('hkl file reading failure!')
        return

def load_hkl_files2df(fns = []):
    dfx = pd.DataFrame()
    if len(fns):
        for i, fn in enumerate(fns):
            fn = read_hkl(fn, datatype='GENERAL')
            dict_df = {"h": fn[:,0].astype(int), "k":fn[:,1].astype(int), "l":fn[:,2].astype(int), "val":fn[:, 3], "sigma":fn[:, 4]}
            dfn = pd.DataFrame(dict_df)
            dfn["frame"] = i
            dfx = dfx.append(dfn)
        dfx = dfx.set_index(["h", "k", "l"], drop=True)     # set index for group
        dfx.index = pd.Index(dfx.index)                     # set index group
        return dfx

def hkl_arr2df(arr):
    """Convert numpy array of hkl list into DataFrame; index will be done."""
    if len(arr):
        df = pd.DataFrame()
        fn = arr
        dict_df = {"h": fn[:,0].astype(int), "k":fn[:,1].astype(int), "l":fn[:,2].astype(int), "val":fn[:, 3], "sigma":fn[:, 4]}
        df = pd.DataFrame(dict_df)
        df = df.set_index(["h", "k", "l"], drop=True)     # set index for group
        df.index = pd.Index(df.index)                     # set index group
        return df
    else:
        print("Data recording error!")

def arr2df_2(arr):                                        # 1/4 times quicker than above one
    """another method to convert numpy array of hkl list into DataFrame; index will be done."""
    if len(arr):
        df = pd.DataFrame(np.array(arr), columns=['h', 'k', 'l', 'val', 'sigma'])
        df = df.set_index(["h", "k", "l"], drop=True)     # set index for group
        df.index = pd.Index(df.index)                     # set index group
        return df
    else:
        print("Data recording error!")

def arr_unique_cal2df(arr):
    if len(arr):
        df = pd.DataFrame()
        fn = arr
        dict_df = {"h": fn[:,0].astype(int), "k":fn[:,1].astype(int), "l":fn[:,2].astype(int)}
        df = pd.DataFrame(dict_df)
        df = df.set_index(["h", "k", "l"], drop=True)     # set index for group
        df.index = pd.Index(df.index)                     # set index group
        return df
    else:
        print("Data recording error!")

def produce_hkl(arr, fn= "new.hkl", datatype='shelx'):
    """To generate hkl file from numpy array or DataFrame.
    data2: numpy array, n x 5.
    Return: a new hkl file in (3i4, f8.2) format.
    """
    if isinstance(arr, pd.DataFrame):
        arr = arr.reset_index()
        arr = arr.values
    elif isinstance(arr, np.ndarray):
        arr = arr
    arr_3max = arr[:, 3].max()
    arr[:, 3] = 99999.99 * arr[:, 3] / arr_3max
    arr[:, 4] = 99999.99 * arr[:, 4] / arr_3max

    with open(fn, 'w') as f:
        for i in range(len(arr)):
            h, k, l = int(arr[i][0]), int(arr[i][1]), int(arr[i][2])
            inte, sigma = arr[i][3], arr[i][4]
            if datatype == 'shelx':
                print(f'{h:4d}{k:4d}{l:4d}{inte:8.2f}{sigma:8.2f}', file=f)
            elif datatype == 'general':
                print(f'{h:4d}{k:4d}{l:4d}{inte:12.2f}{sigma:12.2f}', file=f)
        return

def dhkl_cal(a, b, c, alpha, beta, gamma, h, k , l):
    """to calculate d value for a specific hkl indices with assigned parameters.
    """
    alpha, beta, gamma = np.radians(alpha), np.radians(beta), np.radians(gamma)

    va = a*b*c*( (1 - (np.cos(alpha))**2 - (np.cos(beta))**2 \
        -(np.cos(gamma))**2 + 2*(np.cos(alpha))*(np.cos(beta))*(np.cos(gamma)) )**(0.5) )
    d_value = va*((h**2)*(b**2)*(c**2)*(np.sin(alpha))**2 \
        + (k**2)*(a**2)*(c**2)*(np.sin(beta))**2 + (l**2)*(a**2)*(b**2)*(np.sin(gamma))**2 \
        + 2*h*k*(c**2)*a*b*((np.cos(alpha))*(np.cos(beta)) - (np.cos(gamma)) ) \
            + 2*k*l*(a**2)*b*c*((np.cos(beta))*(np.cos(gamma)) - (np.cos(alpha)) )\
        + 2*h*l*(b**2)*a*c*((np.cos(alpha))*(np.cos(gamma)) - (np.cos(beta)) ) )**(-0.5)
    return d_value


def load_hkl(filepat, ext='.hkl'):
    """
    Takes a file path or list / tuple including path or a non-specific path
    (e.g.: ./data/*.hkl)  to load a list of .hkl files.
    Return: a list of path of iamge files.
    """
    if isinstance(filepat, (list, tuple)):
        fns = filepat
    elif os.path.exists(filepat):
        root, ext = os.path.splitext(filepat)
        if ext.lower() == ".hkl" or ext.lower() == ".HKL":
            fns = []
            fns.append(filepat)
    else:
        fns = glob.glob(filepat)
    return sorted(fns)

def df_mean_value_merge(fns=[], out='Merged.hkl'):
    dfx = load_hkl_files2df(fns)
    mean_val = dfx.groupby(dfx.index).mean()
    mean_val = mean_val.reset_index()
    mean_val = mean_val.values
    mean_val1 = np.array(list(mean_val[:, 0])).astype(float)
    mean_val2 = np.array(mean_val[:, 1])
    mean_val3 = np.array(mean_val[:, 2])
    mean_val = np.c_[mean_val1, mean_val2.T]
    mean_val = np.c_[mean_val, mean_val3.T]
    arr_3max = mean_val[:, 3].max()
    mean_val[:, 3] = 99999.99 * mean_val[:, 3] / arr_3max
    mean_val[:, 4] = 99999.99 * mean_val[:, 4] / arr_3max
    return produce_hkl(mean_val, out, datatype='shelx')

def hkl_df2arr(df):
    df = df.reset_index()
    df = df.values
    df1 = np.array(list(df[:, 0])).astype(float)
    df2 = np.array(df[:, 1])
    df3 = np.array(df[:, 2])
    df = np.c_[df1, df2.T]
    df = np.c_[df, df3.T]
    df = np.array(df, dtype='float64')
    return df

def set_reslution_shells(dmin=0.8, dmax=20, num_shell=8):
    """To set a uniform resolution shells
    (reciprocal space) against d value."""
    if dmax > dmin >0:
        rmax, rmin = 1/dmin, 1/dmax
        shell_max = []
        shell_min = []
        vol_total = rmax**3 -rmin**3
        vol_per_shell = vol_total / num_shell
        shell_min.append(rmin)
        for i in range(num_shell-1):
            r = vol_per_shell + shell_min[i]**3
            r = pow(r, 1/3)
            r = np.round(r, 2)
            shell_max.append(r)
            shell_min.append(r)
        shell_max.append(rmax)
        shell_max_d = [round(1/x, 2) for x in shell_min]
        shell_min_d = [round(1/x, 2) for x in shell_max]
        return shell_min_d, shell_max_d
    else:
        print("value inout error!")


if __name__ == "__main__":
    pass
    # hkl_path = './data/MIL53_lt_104.hkl'
    # data = read_hkl(hkl_path, datatype='3D-EDT')
    # print(data)
    # d = dhkl_cal(10.7630, 7.1770, 11.0900, 90.0000, 107.9200, 90.0000, 1, 0 , 0)
    # print(1/(2*d))
    # list1, list2 = set_reslution_shells(0.8, 20, 8)
    # print(list1)
    # print(list2)
    # hkl_path = './data/XKN/XKN_4.HKL'
    # data = read_hkl_XDS(hkl_path)
    # print(len(data))
